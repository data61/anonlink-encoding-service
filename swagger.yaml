swagger: '2.0'

info:
  title: Encoding Service REST API
  version: 0.1.0
  description: |
    This API lets you upload personally identifying information (PII) for encoding, and to retrieve the encodings. It does not provide the option to download the raw PII.

  contact:
    name: N1 Analytics
    url: https://github.com/n1analytics/encoding-service
    email: jakub.nabaglo@data61.csiro.au

schemes:
  - http

tags:
  - name: projects
    description: A project is a namespace associated with a schema and keys. All uploaded data must belong to a project. Before uploading any private data, a project with some ID assigned by the user must be created.

  - name: encodings
    description: These methods operate on the data and the encodings, permitting us to upload private information, view progress of the encoding, retrieve the encodings, and delete information.

paths:
  /projects/:
    get:
      summary: List existing linkage projects.
      description: Lists the IDs of existing linkage projects. Every linkage project has a unique ID. To retrieve more information about a project, use `/projects/{project_id}`.
      tags:
        - projects
      operationId: encoding_service.get_projects
      produces:
        - application/json
      responses:
        '200':
          description: List of linkage projects. Every item in the list is a project ID.
          examples:
            application/json: {"projects": ["example-project", "another-project"]}
          schema:
            $ref: '#/definitions/projects_get_success'

    post:
      summary: Add a new linkage project.
      description: Create a new project. This permits us to save the schema and keys in the server and bind all related private data to the same ID. The keys uploaded here cannot be retrieved from the server.
      tags:
        - projects
      operationId: encoding_service.post_project
      consumes:
        - application/json
      parameters:
        - name: project_info
          description: The input for the operation. See the schema.
          in: body
          required: true
          schema:
            $ref: '#/definitions/project_info'
      responses:
        '201':
          description: Successfully created project. The response body contains the project ID.
          schema:
            $ref: '#/definitions/projects_post_success'
        '422':
          $ref: '#/responses/invalid_parameters'


  /projects/{project_id}:
    parameters:
      - $ref: '#/parameters/project_id'

    get:
      summary: Retrieve properties of the specified project.
      description: Retrieves the public properties, if any, of the specified object. In CLK hashing this is the schema; we do not reveal the keys.
      tags:
        - projects
      operationId: encoding_service.get_project
      responses:
        '200':
          description: Properties of specified object.
          schema:
            $ref: '#/definitions/project_get_success'
        '404':
          $ref: '#/responses/no_such_project'

    delete:
      summary: Delete the linkage project.
      description: Deletes the linkage project, along with its schema and keys. Deletes any computed encodings. If any encoding jobs are still pending, they are aborted.
      tags:
        - projects
      operationId: encoding_service.delete_project
      responses:
        '204':
          $ref: '#/responses/delete_success'
        '404':
          $ref: '#/responses/no_such_project'


  /projects/{project_id}/pii/:
    parameters:
      - $ref: '#/parameters/project_id'

    post:
      summary: Post PII to encode.
      description: Save private information to the server and schedule the encoding. The private information cannot be retrieved from the API in its original form; only the encodings are made available. It is deleted as soon as the encoding is produced.
      tags:
        - encodings
      operationId: encoding_service.post_pii
      consumes:
        - text/csv
      parameters:
        - name: pii_table
          in: body
          required: true
          schema:
            type: string
            example: |
              NAME freetext,DOB YYYY/MM/DD,GENDER M or F
              Jane Doe,1968/05/19,F
              Peter Griffin,1998/12/20,M
        - name: header
          description: |
            Default `ignore`: the CSV input has a header row but we simply ignore it.

            Set to `validate` if the CSV input has a header row and we wish to validate it. The encoding scheme must support data validation.

            Set to `false` if the CSV input does not have a header row. The first row of the table is taken to contain a record.
          in: query
          type: string
          enum: ['false', 'ignore', 'validate']
          required: false
          default: 'ignore'
        - name: validate
          description: 'If `true`, validate the PII before encoding. The encoding scheme must support validation. Default `false`.'
          in: query
          type: boolean
          required: false
          default: false
      responses:
        '202':
          description: "Hashing job successfully scheduled. This does not indicate success of the whole encoding operation: the asynchronous job might still fail."
        '404':
          $ref: '#/responses/no_such_project'
        '422':
          $ref: '#/responses/invalid_parameters'


  /projects/{project_id}/encodings/status:
    parameters:
      - $ref: '#/parameters/project_id'

    get:
      summary: Get progress of all encodings.
      description: Returns the progress of each encoding.
      tags:
        - encodings
      operationId: encoding_service.get_encodings_status
      responses:
        '200':
          description: |
            The status of each encoding, by index. The list is empty if there are no encodings. Each list element contains an ID and the status.

            Possible statuses are `queued` (awaiting processing), `in-progress` (being processed now), `done` (ready for retrieval), `invalid` (data did not pass validation against the schema), and `error` (internal error).
          schema:
            $ref: '#/definitions/encoding_status_success'
        '404':
          $ref: '#/responses/no_such_project'


  /projects/{project_id}/encodings/:
    parameters:
      - $ref: '#/parameters/project_id'
      - name: ids
        in: query
        description: A comma-separated list of IDs.
        required: true
        type: array
        items:
          type: string
    
    get:
      summary: Retrieve the encodings, if available.
      description: Retrieve the index, status, and digest (if available) of each encoding.
      tags:
        - encodings
      operationId: encoding_service.get_encodings
      responses:
        '200':
          description: The specified encodings are returned along with their status. The encoding digest is `null` where it has not been computed.
          examples:
            application/json: 
              count: 2
              encodings:
                - id: '0'
                  status: invalid
                  errMsg: Column `DOB YYYY/MM/DD` did not pass validation.
                - id: '1'
                  status: done
                  encoding: 2wRKwCio1SQDeAAEowBECdwNGkAJgChviDATAHTDRCgQECHqxiEARgl+iLQADIspmCB7gcFUgKGIwvCMBAirULh5kkDaiTlAJowckX8A0BEgk8MgkABIF2EmByhJK6AiMwCGjlGYIlCCwiQAICED4QEgBAMsIBiAMBDkGyCSQAI=
                - id: '2'
                  status: in-progress
        '404':
          $ref: '#/responses/no_such_project'
        '422':
          $ref: '#/responses/invalid_parameters'

    delete:
      summary: If finished encoding, delete the encodings. Otherwise, abandon encoding and delete the PII.
      description: Deletes specified entry from the server, including any encodings and private data. If the encoding has not occured, cancels the scheduled job.
      tags:
        - encodings
      operationId: encoding_service.delete_encodings
      responses:
        '204':
          $ref: '#/responses/delete_success'
        '404':
          $ref: '#/responses/no_such_project'
        '422':
          $ref: '#/responses/invalid_parameters'


responses:
  invalid_parameters:
    description: Invalid parameters. The `"errMsg"` key contains the error message.
    examples:
      application/json: {"errMsg": "Error in argument `status`: 'obviously-wrong-status' is not a valid status."}
    schema:
      $ref: '#/definitions/error'
  
  no_such_project:
    description: No such project. The `"errMsg"` key contains the error message.
    examples:
      application/json: {"errMsg": "Project 'example-project' does not exist."}
    schema:
      $ref: '#/definitions/error'
  
  delete_success:
    description: Successfully deleted. The response body is empty.

  
definitions:
  project_info:
    type: object
    required:
      - scheme
      - scheme_info
    properties:
      scheme:
        type: string
        enum: ['clk']
      scheme_info:
        type: object
        required: ['schema', 'keys']
        properties:
          schema:
            type: object
          keys:
            type: array
            items:
              type: string
  
  projects_post_success:
    type: object
    required:
      - project_id
    properties:
      project_id:
        type: string
  
  project_get_success:
    type: object
    required:
      - scheme
      - scheme_info
    properties:
      scheme:
        type: string
      scheme_info:
        type: object
        required:
          - schema
        properties:
          schema:
            type: object
  
  projects_get_success:
    type: object
    required:
      - projects
    properties:
      projects:
        type: array
        items:
          type: string
  
  encoding_status_success:
    type: object
    required:
      - encoding_statuses
    properties:
      encoding_statuses:
        type: array
        items:
          type: object
          required:
            - id
            - status
          properties:
            id:
              type: string
            status:
              type: string
              enum: ['queued', 'in-progress', 'done', 'invalid', 'error']
            errMsg:
              type: string
            encoding:
              type: string

  error:
    type: object
    required:
      - errMsg
    properties:
      errMsg:
        type: string


parameters:
  project_id:
    name: project_id
    in: path
    description: The unique ID of the linkage project.
    required: true
    type: string
