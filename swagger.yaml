swagger: '2.0'

info:
  title: Clkhash REST API
  version: 0.0.3
  description: A simple REST wrapper around clkhash.

  contact:
    name: N1 Analytics
    url: https://github.com/n1analytics/clkhash-service
    email: jakub.nabaglo@data61.csiro.au

schemes:
  - http

tags:
  - name: project
    description: A project is a namespace associated with a schema and keys. All uploaded data must belong to a project. Before uploading any private data, a project with some ID assigned by the user must be created.

  - name: clk
    description: These methods operate on the data and the hashes, permitting us to upload private information, view progress of the hashing, retrieve the clks, and delete information.

paths:
  /projects/:
    get:
      summary: List existing linkage projects.
      description: Lists the IDs of existing linkage projects. Every linkage project has a unique ID. To retrieve more information about a project, use `/projects/{project_id}`.
      tags:
        - projects
      operationId: clkhash_service.get_projects
      produces:
        - application/json
      responses:
        200:
          description: List of linkage projects.
          examples:
            application/json: {"projects": ["example-project", "another-project"]}

  /projects/{project_id}:
    parameters:
      - $ref: '#/parameters/project_id'

    post:
      summary: Add a new linkage project.
      description: Create a new project. This permits us to save the schema and keys in the server and bind all related private data to the same ID. The keys uploaded here cannot be retrieved from the server.
      tags:
        - projects
      operationId: clkhash_service.post_project
      consumes:
        - application/json
      parameters:
        - name: schema
          in: body
          required: true
          schema:
            example:
              version: 1
              clkConfig:
                l: 1024
                k: 20
                hash:
                  type: doubleHash
                kdf:
                  type: HKDF
                  hash: SHA256
                  salt: SCbL2zHNnmsckfzchsNkZY9XoHk96P/G5nUBrM7ybymlEFsMV6PAeDZCNp3rfNUPCtLDMOGQHG4pCQpfhiHCyA==
                  info: c2NoZW1hX2V4YW1wbGU=
                  keySize: 64
              features:
                - identifier: NAME freetext
                  format:
                    type: string
                    encoding: utf-8
                    case: mixed
                    minLength: 3
                  hashing:
                    ngram: 2
                    weight: 0.5
                - identifier: DOB YYYY/MM/DD
                  format:
                    type: string
                    encoding: ascii
                    description: Numbers separated by slashes, in the year, month, day order
                    pattern: \d\d\d\d/\d\d/\d\d
                  hashing:
                    ngram: 1
                    positional: true
                - identifier:
                    format:
                      type: enum
                      values:
                        - M
                        - F
                    hashing:
                      ngram: 1
                      weight: 2
        - name: key1
          in: query
          type: string
          required: true
        - name: key2
          in: query
          type: string
          required: true
      responses:
        201:
          description: Successfully created project.
        409:
          description: Project with this ID already exists.
        422:
          description: The parameters are not valid.

    get:
      summary: Retrieve properties of the specified project.
      description: Retrieves the public properties (currently the schema) of the specified object.
      tags:
        - projects
      operationId: clkhash_service.get_project
      responses:
        200:
          description: Properties of specified object.
          examples:
            application/json:
              project_id: example-project
              schema:
                version: 1
                clkConfig:
                  l: 1024
                  k: 20
                  hash:
                    type: doubleHash
                  kdf:
                    type: HKDF
                    hash: SHA256
                    salt: SCbL2zHNnmsckfzchsNkZY9XoHk96P/G5nUBrM7ybymlEFsMV6PAeDZCNp3rfNUPCtLDMOGQHG4pCQpfhiHCyA==
                    info: c2NoZW1hX2V4YW1wbGU=
                    keySize: 64
                features:
                  - identifier: NAME freetext
                    format:
                      type: string
                      encoding: utf-8
                      case: mixed
                      minLength: 3
                    hashing:
                      ngram: 2
                      weight: 0.5
                  - identifier: DOB YYYY/MM/DD
                    format:
                      type: string
                      encoding: ascii
                      description: Numbers separated by slashes, in the year, month, day order
                      pattern: \d\d\d\d/\d\d/\d\d
                    hashing:
                      ngram: 1
                      positional: true
                  - identifier:
                      format:
                        type: enum
                        values:
                          - M
                          - F
                      hashing:
                        ngram: 1
                        weight: 2
        404:
          description: No such project.

    delete:
      summary: Delete the linkage project.
      description: Deletes the linkage project, along with its schema and keys. This deletes any computed all hashes. If some hashing was still pending, those jobs are aborted.
      tags:
        - projects
      operationId: clkhash_service.delete_project
      responses:
        204:
          description: Successfully deleted.
        404:
          description: No such project.

  /projects/{project_id}/pii/:
    parameters:
      - $ref: '#/parameters/project_id'

    post:
      summary: Post PII to hash.
      description: Save private information to the server and schedule the hashing. The private information cannot be retrieved from the API in its original form; only the hashes are made available. It is deleted as soon as the hash is produced.
      tags:
        - clks
      operationId: clkhash_service.post_pii
      consumes:
        - text/csv
      parameters:
        - name: pii_table
          in: body
          required: true
          schema:
            type: string
            example: |
              NAME freetext,DOB YYYY/MM/DD,GENDER M or F
              Jane Doe,1968/05/19,F
              Peter Griffin,1998/12/20,M
        - name: header
          description: 'Set to `true` if the csv input has a header row.'
          in: query
          type: boolean
          required: false
          default: false
        - name: validate
          description: 'If `true`, validate the PII before hashing.'
          in: query
          type: boolean
          required: false
          default: true
      responses:
        202:
          description: Successfully sent for hashing.
          examples:
            application/json: {'data_ids': [0, 1]}

        404:
          description: No such project.

        422:
          description: Invalid data. Details in payload.

  /projects/{project_id}/clks/:
    parameters:
      - $ref: '#/parameters/project_id'

    get:
      summary: Get status of all clks.
      description: Returns the status of each clk. 
      tags:
        - clks
      operationId: clkhash_service.get_clks_status
      responses:
        200:
          description: The status of each clk, by index. For convenience, adjacent clks with the same status are grouped together. The list is empty if there are not clks. The ranges are exclusive. Possible statuses are `queued` (awaiting processing), `in progress` (being processed now), `done` (ready for retrieval), `invalid data` (data did not pass validation against the schema), and `error` (internal error).
          examples:
            application/json:
              clks_status:
                - range_start: 0
                  range_end: 16003
                  status: done
                - range_start: 16002
                  range_end: 100003
                  status: queued
        404:
          description: No such project.

  /projects/{project_id}/clks/{range_start}/{range_end}:
    parameters:
      - $ref: '#/parameters/project_id'
      - name: range_start
        in: path
        description: The index of the first clk to operate on.
        required: true
        type: integer
        minimum: 0
      - name: range_end
        in: path
        description: The number of clks to operate on.
        required: true
        type: integer
        minimum: 1

    get:
      summary: Retrieve the clks, if available.
      description: Retrieve the index, status, and hash of each clk.
      tags:
        - clks
      operationId: clkhash_service.get_clks
      responses:
        200:
          description: The clks are returned along with their status. The hash is `null` where it has not been computed. The list is empty if there are no clks with IDs in the specified range.
          examples:
            application/json: 
              count: 2
              clks:
                - errMsg: Column `DOB YYYY/MM/DD` did not pass validation.
                  hash: null
                  index: 0
                  status: invalid data
                - errMsg: null
                  hash: 2wRKwCio1SQDeAAEowBECdwNGkAJgChviDATAHTDRCgQECHqxiEARgl+iLQADIspmCB7gcFUgKGIwvCMBAirULh5kkDaiTlAJowckX8A0BEgk8MgkABIF2EmByhJK6AiMwCGjlGYIlCCwiQAICED4QEgBAMsIBiAMBDkGyCSQAI=
                  index: 1
                  status: done
        404:
          description: No such project.

    delete:
      summary: If finished hashing, delete the clks. Otherwise, abandon hashing and delete the PII.
      description: Deletes specified entry from the server, including any hashes and private data. If the hashing has not occured, cancels the scheduled job. If there are no clks within the specified range, do nothing.
      tags:
        - clks
      operationId: clkhash_service.delete_clks
      responses:
        204:
          description: Successfully deleted. Number of deleted items specified in the payload.
          examples:
            application/json: 
              count: 2
        404:
          description: No such project.

parameters:
  project_id:
    name: project_id
    in: path
    description: The ID of the linkage project. Must be unique.
    required: true
    type: string
